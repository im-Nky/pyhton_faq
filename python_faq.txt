1. Difference between list and tuples: List are mutable and tuples are Immutable

2. Genrators: Genrators are ways to implement Iterator

	Genrator Function: When it needs to genrate a value, It does so with 
			   the "yield keyword".

	Eg. def simple_genrator():
		yield 1
		yield 2
		yield 3

3. Decorators: Decorators are poweerful tool iin python, allows programmer to modify
	       the behavior of function or class.


	       Decorators allow us to wrap another function in order to extend the 
	       behavior of wrapped function, without permanently modifying it.

		@gfg_decorators
		def hello():
			print("gfg")

4. Lambda Function: Lambda is inline function in python also known as anonymous function.


5. Packing and Unpacking: Whwn we don't know how many arguments need to be passed to a 
			python function. we can use packing to pack all arguments.


	*args  // To pack the list	* for tuples
					** for dictiories

	my_list = [1,2,3,4]
	fun(my_list)

6. "Self" Keyword : Self represent the instance of the class by using self we can access 
		    att and methods of class.

7. Namespace =: A name where it lives and can hooked for.

8. Dictionary : A dictionary is a collection which is unordered , chageable and indexed.

	thisdict = {
		"brand" : "Ford",
		"Model" : "Mustang",
		"Year"	: 1964
		}

9. List comprehension and slicing: It's way to define and create list in python.


10. PEP8: Coding convension , a set of recommendation to write more readable way.

11. Pickling and unpickling: Pickle module accepts any object and converts it into 
				string and dump it into a file using dump function.

	python is merged into 'private heap space'.

12. difference between a normal def defined function and lambda function

E.g. 	# Python code to illustrate cube of a number 
	# showing difference between def() and lambda(). 
	def cube(y): 
		return y*y*y; 

	g = lambda x: x*x*x 
	print(g(7)) 

	print(cube(5)) 


13. Filter-Map-reduce: 

 (i) **Use of lambda() with Filter() ** : The filter() function in Python takes in a function and a list as arguments. This offers an elegant way to filter out all the elements of a sequence “sequence”, for which the function returns True. Here is a small program that returns the odd numbers from an input list:
 
 E.g.	# Python code to illustrate 
	# filter() with lambda() 
	li = [5, 7, 22, 97, 54, 62, 77, 23, 73, 61] 
	final_list = list(filter(lambda x: (x%2 != 0) , li)) 
	print(final_list) 
	
 Ouput: [5, 7, 97, 77, 23, 73, 61]
	
(ii) **Use of lambda() with map()** : 	The map() function in Python takes in a function and a list as argument. The function is called with a lambda function and a list and a new list is returned which contains all the lambda modified items returned by that function for each item.

E.g.  	# Python code to illustrate 
	# map() with lambda() 
	# to get double of a list. 
	li = [5, 7, 22, 97, 54, 62, 77, 23, 73, 61] 
	final_list = list(map(lambda x: x*2 , li)) 
	print(final_list)
	
Output: [10, 14, 44, 194, 108, 124, 154, 46, 146, 122]

(iii) **Use of lambda() with reduce()** : The reduce() function in Python takes in a function and a list as argument. The function is called with a lambda function and a list and a new reduced result is returned. This performs a repetitive operation over the pairs of the list. This is a part of functools module

E.g. 	# Python code to illustrate 
	# reduce() with lambda() 
	# to get sum of a list 
	from functools import reduce
	li = [5, 8, 10, 20, 50, 100] 
	sum = reduce((lambda x, y: x + y), li) 
	print (sum) 

  Output: 193
 
Here the results of previous two elements are added to the next element and this goes on till the end of the list like (((((5+8)+10)+20)+50)+100).
